// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---- MODELOS PERSONALIZADOS DE TU APP ----
enum Role {
  ADMIN
  USER
}

model Producto {
  id           Int           @id @default(autoincrement())
  nombre       String
  descripcion  String?
  precio       Float
  stock        Int
  menu         Menu?         @relation(fields: [menuId], references: [id])
  menuId       Int?
  pedidos      Pedido[]      @relation("PedidoProductos")
  itemCarritos ItemCarrito[]

  @@map("productos")
}

model Menu {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]

  @@map("menus")
}

model Carrito {
  id        Int           @id @default(autoincrement())
  usuario   User          @relation(fields: [usuarioId], references: [id])
  usuarioId String        @unique
  items     ItemCarrito[]

  @@map("carritos")
}

model ItemCarrito {
  id         Int      @id @default(autoincrement())
  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int
  cantidad   Int
  carrito    Carrito  @relation(fields: [carritoId], references: [id])
  carritoId  Int

  @@map("item_carritos")
}

model Pedido {
  id        Int        @id @default(autoincrement())
  usuario   User       @relation(fields: [usuarioId], references: [id])
  usuarioId String
  total     Float
  productos Producto[] @relation("PedidoProductos")
  pago      Pago?

  @@map("pedidos")
}

model Pago {
  id         Int      @id @default(autoincrement())
  monto      Float
  metodoPago String
  estadoPago String
  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId   Int      @unique

  @@map("pagos")
}


// ---- MODELOS REQUERIDOS POR NEXT-AUTH ----

// Renombramos 'Usuario' a 'User' y le agregamos lo que NextAuth necesita
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rol           Role      @default(USER)
  pedidos       Pedido[]
  carrito       Carrito?

  direccion     String?
  celular       String?
  metodoPago    String?

  @@map("usuarios")
}

// Modelo para vincular un usuario con un proveedor (Auth0, Google, etc.)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("cuentas")
}

// Modelo para las sesiones de usuario
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sesiones")
}

// Modelo para tokens de verificaci√≥n (ej. para login con email)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens_verificacion")
}